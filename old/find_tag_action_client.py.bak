import rclpy
from rclpy.node import Node
from rclpy.action import ActionClient
from action_msgs.msg import GoalStatus
from action_interface.action import Tag
from geometry_msgs.msg import PoseStamped
from nav2_simple_commander.robot_navigator import BasicNavigator
import numpy as np
import time

class FindTagActionClient(Node):

    def __init__(self):
        super().__init__('find_tag')
        self.tag_action_client = ActionClient(self, Tag, 'tag_finder')
        self.goal_handle = None
        self.result_future = None
        self.tag = -1
        self.x = 0.0
        self.y = 0.0
        self.orientation = 0.0

    def tag_is_found(self, min_tag, max_tag):
        self.tag_action_client.wait_for_server()

        goal_msg = Tag.Goal()
        goal_msg.min_tag = min_tag
        goal_msg.max_tag = max_tag
        
        send_goal_future = self.tag_action_client.send_goal_async(goal_msg)
        rclpy.spin_until_future_complete(self, send_goal_future)
        self.goal_handle = send_goal_future.result()

        if not self.goal_handle or not self.goal_handle.accepted:
            self.get_logger().info('Goal was not accepted')
        else:
            self.result_future = self.goal_handle.get_result_async()
            rclpy.spin_until_future_complete(self, self.result_future)
            result = self.result_future.result().result
            status = self.result_future.result().status
            if status == GoalStatus.STATUS_SUCCEEDED and result.tag != -1:
                self.tag = result.tag
                self.x = result.x
                self.y = result.y
                self.orientation = result.orientation
                return True
        self.tag = -1
        self.x = 0.0
        self.y = 0.0
        self.orientation = 0.0
        return False

    def get_box_pose(self):
        return self.tag, self.x, self.y, self.orientation

    def get_target_pose(self):
        # robot should receive a target pose 40cm in front of box
        # with orientation pointing toward box
        offset = 0.4
        dx = offset*np.cos(self.orientation)
        dy = offset*np.sin(self.orientation)
        return self.tag, self.x + dx, self.y + dy, (self.orientation + np.pi) % (2*np.pi)

def main(args=None):
    rclpy.init(args=args)
    tag_action_client = FindTagActionClient()
    navigator = BasicNavigator()
    navigator.waitUntilNav2Active() # NOTE: changed this - before doing send_goal_async(); prevents client from killing Nav2 midâ€‘run.
    goal_pose = PoseStamped()
    goal_pose.header.frame_id = 'map'
    goal_pose.header.stamp = navigator.get_clock().now().to_msg()
    goal_pose.pose.position.x = 2.0
    goal_pose.pose.position.y = -1.0
    goal_pose.pose.orientation.w = np.cos(0.5 * np.radians(-90))
    goal_pose.pose.orientation.z = np.sin(0.5 * np.radians(-90))

    try:
        navigator.goToPose(goal_pose)
        while not navigator.isTaskComplete():
            print('Looking for tag')
            if tag_action_client.tag_is_found(0, 32): # MIN/MAX TAG
            # if tag_action_client.tag_is_found(0, 19):
                navigator.cancelTask()
                tag, x, y, o = tag_action_client.get_target_pose()
                print('    Found tag')
                print('   ',tag, x, y, o)
            time.sleep(1.0)
    except KeyboardInterrupt:
        pass

if __name__ == '__main__':
    main()
